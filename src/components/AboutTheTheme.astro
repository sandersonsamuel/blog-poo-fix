---
import CodeBlock from '../components/CodeBlock.astro'
---
<div>
  <ul class="mt-5">
    <li>
      <strong>Objetos e Classes</strong>
      <ol class="list-disc">
        <li>Definição de objetos e sua relação com classes.</li>
        <li>
          Princípios fundamentais da POO.</li>
      </ol>
    </li>

    <li>
      <strong>Herança</strong>
      <ol class="list-disc">
        <li>Entendimento e aplicação do conceito de herança.</li>
        <li>Hierarquias de classes e reutilização de código.</li>
      </ol>
    </li>

    <li>
      <strong>Polimorfismo</strong>
      <ol class="list-disc">
        <li>Exploração do polimorfismo e seus benefícios.</li>
        <li>Flexibilidade na manipulação de objetos.</li>
      </ol>
    </li>

    <li>
      <strong>Encapsulamento</strong>
      <ol class="list-disc">
        <li>Importância do encapsulamento na POO.</li>
        <li>Utilização de modificadores de acesso para proteger dados.</li>
      </ol>
    </li>
  </ul>
</div>

<div class="mt-5">
  <h1 class="text-5xl font-semibold bg-gradient-to-br from-[#fb923c] via-[#f97316] to-[#ea580c] dark:from-primary-main dark:via-primary-main dark:to-primary-main bg-clip-text text-transparent">
    1. Objetos e Classes
  </h1>

  <p class="mb-3">Na Programação Orientada a Objetos (POO), objetos e classes desempenham um papel fundamental. Vamos explorar esses conceitos essenciais que formam a base da POO em Java.</p>

  <h3 class="text-xl font-semibold bg-gradient-to-br from-[#fb923c] via-[#f97316] to-[#ea580c] dark:from-primary-main dark:via-primary-main dark:to-primary-main bg-clip-text text-transparent">Classes: O Molde para Objetos</h3>

  <p class="mb-3">As classes são como moldes ou blueprints que definem a estrutura e o comportamento dos objetos. Elas contêm atributos (também conhecidos como campos) para representar o estado e métodos para definir o comportamento dos objetos.</p>

  <p class="mb-3 font-bold">Exemplo:</p>

  <CodeBlock language="java" content={`public class Carro {
    // Atributos
    String marca;
    String modelo;
    int ano;

    // Métodos
    public void ligar() {
        System.out.println("O carro está ligado.");
    }

    public void desligar() {
        System.out.println("O carro está desligado.");
}`} />

  <p>No exemplo acima, Carro é uma classe que define as características de um carro, como marca, modelo e ano. Além disso, ela possui métodos ligar() e desligar() para controlar o estado do carro.</p>

  <p class="mb-3 font-bold">Exemplo:</p>

  <CodeBlock language="java" content={`
  public class Main {
    public static void main(String[] args) {
        // Criando objetos (instanciando a classe Carro)
        Carro meuCarro = new Carro();
        meuCarro.marca = "Toyota";
        meuCarro.modelo = "Corolla";
        meuCarro.ano = 2020;

        // Chamando métodos do objeto
        meuCarro.ligar();
    }
}
`} />

  <p>Neste exemplo, meuCarro é um objeto da classe Carro. Atribuímos valores aos seus atributos e chamamos o método ligar() para iniciar o carro.</p>

  <h3 class="text-xl mt-2 font-semibold bg-gradient-to-br from-[#fb923c] via-[#f97316] to-[#ea580c] dark:from-primary-main dark:via-primary-main dark:to-primary-main bg-clip-text text-transparent">Conclusão</h3>

  <p>Em resumo, classes definem a estrutura e o comportamento dos objetos, enquanto objetos são instâncias específicas dessas classes, representando entidades individuais. Entender a relação entre objetos e classes é fundamental para a compreensão da Programação Orientada a Objetos e seu uso eficaz na linguagem Java.</p>

</div>

<div class="mt-5">
  <h1 class="text-5xl font-semibold bg-gradient-to-br from-[#fb923c] via-[#f97316] to-[#ea580c] dark:from-primary-main dark:via-primary-main dark:to-primary-main bg-clip-text text-transparent">
    2. Herança
  </h1>

  <p>A herança é um conceito fundamental na POO que permite que uma classe (subclasse) herde atributos e métodos de outra classe (superclasse). Isso promove a reutilização de código e permite a criação de hierarquias de classes.</p>


  <h1 class="mt-5 text-xl font-semibold bg-gradient-to-br from-[#fb923c] via-[#f97316] to-[#ea580c] dark:from-primary-main dark:via-primary-main dark:to-primary-main bg-clip-text text-transparent">
    Como funciona a herança?</h1>

  <p>Na herança, uma classe pode estender outra classe, o que significa que a subclasse herda todos os atributos e métodos da superclasse. A subclasse pode então adicionar novos atributos e métodos ou substituir os existentes conforme necessário.</p>

  <p class="b-3 font-bold">Exemplo:</p>

  <CodeBlock language="java" content={`
  public class Animal {
    public void comer() {
      System.out.println("O animal está comendo.");
    }
  }

    public class Cachorro extends Animal {
      public void latir() {
        System.out.println("O cachorro está latindo.");
      }
    }

    public class Gato extends Animal {
      public void miar() {
        System.out.println("O gato está miando.");
      }
    }
  `} />

  <p>Neste exemplo, a classe "Cachorro" e a classe "Gato" estendem a classe "Animal", herdando o método "comer()". Além disso, cada uma dessas subclasses possui seus próprios métodos específicos ("latir()" para "Cachorro" e "miar()" para "Gato").</p>

</div>

<div class="mt-5">
  <h1 class="text-5xl font-semibold bg-gradient-to-br from-[#fb923c] via-[#f97316] to-[#ea580c] dark:from-primary-main dark:via-primary-main dark:to-primary-main bg-clip-text text-transparent">
    3. Polimorfismo
  </h1>

  <p>O polimorfismo é um dos pilares da POO e permite que um objeto seja tratado de várias maneiras, dependendo do contexto em que é utilizado. Isso promove a flexibilidade e extensibilidade do código.</p>

  <h1 class="mt-5 text-xl font-semibold bg-gradient-to-br from-[#fb923c] via-[#f97316] to-[#ea580c] dark:from-primary-main dark:via-primary-main dark:to-primary-main bg-clip-text text-transparent">
    Como funciona o Polimorfismo?
  </h1>

  <p>No polimorfismo, um objeto de uma classe específica pode se comportar como um objeto de sua superclasse ou como um objeto de uma interface que ela implementa. Isso permite que métodos sejam chamados de maneira polimórfica, ou seja, um método pode ter diferentes implementações dependendo do tipo do objeto em questão.</p>

  <p class="mb-3 font-bold">Exemplo:</p>

  <CodeBlock language="java" content={`public interface Animal {
    void fazerBarulho();
  }
  
  public class Cachorro implements Animal {
      @Override
      public void fazerBarulho() {
          System.out.println("O cachorro está latindo.");
      }
  }
  
  public class Gato implements Animal {
      @Override
      public void fazerBarulho() {
          System.out.println("O gato está miando.");
      }
  }
  
  public class Main {
      public static void main(String[] args) {
          Animal animal1 = new Cachorro();
          Animal animal2 = new Gato();
  
          animal1.fazerBarulho(); // Saída: O cachorro está latindo.
          animal2.fazerBarulho(); // Saída: O gato está miando.
      }
  }
  `}/>

  <p>Neste exemplo, a interface "Animal" define o método "fazerBarulho()". As classes "Cachorro" e "Gato" implementam essa interface e fornecem suas próprias implementações para o método "fazerBarulho()". O polimorfismo é demonstrado quando objetos das classes "Cachorro" e "Gato" são tratados como objetos do tipo "Animal" e o método "fazerBarulho()" é chamado de maneira polimórfica.</p>

</div>

<div class="mt-5">
  <h1 class="text-5xl font-semibold bg-gradient-to-br from-[#fb923c] via-[#f97316] to-[#ea580c] dark:from-primary-main dark:via-primary-main dark:to-primary-main bg-clip-text text-transparent">
    4. Encapsulamento
  </h1>

  <p>O encapsulamento é um dos princípios fundamentais da POO e consiste em ocultar os detalhes de implementação de uma classe, expondo apenas uma interface para interação com objetos dessa classe. Isso promove a segurança e a manutenibilidade do código.</p>

  <h1 class="mt-5 text-xl font-semibold bg-gradient-to-br from-[#fb923c] via-[#f97316] to-[#ea580c] dark:from-primary-main dark:via-primary-main dark:to-primary-main bg-clip-text text-transparent">
    Como funciona o encapsulamento?
  </h1>

  <p>No encapsulamento, os atributos de uma classe são declarados como privados, o que significa que eles só podem ser acessados e modificados por métodos internos da classe. Isso impede o acesso direto aos atributos de fora da classe, garantindo que seu estado seja controlado de maneira segura.</p>

  <h3 class="mt-3 font-bold">Exemplo:</h3>

  <CodeBlock language="java" content={`
    public class Carro {
      // Atributos privados
      private String marca;
      private String modelo;
      private int ano;
  
      // Métodos públicos para acessar e modificar os atributos
      public String getMarca() {
          return marca;
      }
  
      public void setMarca(String marca) {
          this.marca = marca;
      }
  
      public String getModelo() {
          return modelo;
      }
  
      public void setModelo(String modelo) {
          this.modelo = modelo;
      }
  
      public int getAno() {
          return ano;
      }
  
      public void setAno(int ano) {
          this.ano = ano;
      }
  }
    `}/>

  <p>Neste exemplo, os atributos "marca", "modelo" e "ano" são declarados como privados e só podem ser acessados ou modificados por meio dos métodos públicos "get" e "set". Isso encapsula o estado interno da classe "Carro" e garante que seu acesso seja controlado de maneira segura.</p>

</div>

<div class="mt-5">
  <h1 class="text-5xl font-semibold bg-gradient-to-br from-[#fb923c] via-[#f97316] to-[#ea580c] dark:from-primary-main dark:via-primary-main dark:to-primary-main bg-clip-text text-transparent">
    Considerações Finais
  </h1>

  <p class="mb-3">A Programação Orientada a Objetos (POO) é fundamental para o desenvolvimento de sistemas modulares e escaláveis. Os conceitos de objetos, classes, herança, polimorfismo e encapsulamento são essenciais para escrever código eficiente e de fácil manutenção.</p>

  <p class="mb-3">A POO promove a reutilização de código, facilita a colaboração entre equipes de desenvolvimento e ajuda a reduzir a complexidade de grandes projetos. Ao dominar esses conceitos, os desenvolvedores podem criar soluções mais elegantes e eficazes para uma ampla variedade de problemas.</p>

  <p class="mb-3">Continue praticando e explorando os princípios da POO para aprimorar suas habilidades de desenvolvimento de software. Obrigado por nos acompanhar e boa jornada na sua aprendizagem em POO!</p>
</div>